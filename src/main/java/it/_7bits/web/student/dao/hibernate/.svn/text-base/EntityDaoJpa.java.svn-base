package it._7bits.web.student.dao.hibernate;

import it._7bits.web.student.dao.DaoGeneralException;
import it._7bits.web.student.dao.IEntityDao;
import org.apache.log4j.Logger;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import java.util.List;
import java.util.Map;


/**
 * Base JPA DAO
 */
public class EntityDaoJpa<Entity> implements IEntityDao<Entity> {

    protected final Logger LOG = Logger.getLogger(getClass());

    @PersistenceContext
    private EntityManager entityManager;
    private Class<Entity> entityClass;


    public EntityDaoJpa (Class<Entity> entityClass) {
        this.entityClass = entityClass;
    }

    /**
     * Find all Entity occurrences via JPA
     *
     * @return List with all Entities found
     * @throws it._7bits.web.student.dao.DaoGeneralException if operation fails
     */
    @Override
    public List<Entity> findAll()
            throws DaoGeneralException {
        try {
            return entityManager.
                    createQuery("from " + entityClass.getName(), entityClass)
                    .getResultList();
        } catch (Exception e) {
            throw new DaoGeneralException (getClass(), "Cannot list all entities via JPA: ", e);
        }
    }

    /**
     * Find all Entities using query via JPA
     *
     * @param query      Named query
     * @param parameters Parameters to use in query
     * @return List of all Entities returned from source using corresponding query
     * @throws it._7bits.web.student.dao.DaoGeneralException if operation fails
     */
    @Override
    public List<Entity> findByQuery (final String query,
                                     final Map<String, Object> parameters)
            throws DaoGeneralException {

        if (query == null || query.isEmpty()) {
            return null;
        }
        try {
            TypedQuery<Entity> typedQuery = entityManager.createQuery(query, entityClass);
            if (parameters != null && !parameters.isEmpty()) {
                for (Map.Entry<String,Object> parameter: parameters.entrySet()) {
                    typedQuery.setParameter (parameter.getKey(), parameter.getValue());
                }
            }
            return typedQuery.getResultList();
        } catch (Exception e) {
            throw new DaoGeneralException (getClass(), "Cannot list entities with custom query via JPA: ", e);
        }
    }

    /**
     * Find Entity using its id via JPA
     *
     * @param id Id of Entity
     * @return Entity
     * @throws it._7bits.web.student.dao.DaoGeneralException if operation fails
     */
    @Override
    public Entity findById (final Long id)
            throws DaoGeneralException {
        if (id == null) return null;
        try {
            return entityManager.find (entityClass, id);
        } catch (Exception e) {
            throw new DaoGeneralException (getClass(), "Cannot get entity by Id via JPA: ", e);
        }
    }

    /**
     * Add new Entity to source via JPA.
     * Assumes it does not exist in it.
     *
     * @param entity new Entity, id should be null if auto-generated
     * @throws it._7bits.web.student.dao.DaoGeneralException if operation fails
     */
    @Override
    public void add (final Entity entity)
            throws DaoGeneralException {
        try {
            if (entity != null) {
                Entity toAdd = (Entity) entityClass
                        .getDeclaredConstructor (entityClass.getSuperclass())
                        .newInstance (entity);
                entityManager.persist (toAdd);
            }
        } catch (Exception e) {
            throw new DaoGeneralException (getClass(), "Cannot add entity via JPA: ", e);
        }
    }

    /**
     * Update Entity which is already in source via JPA
     *
     * @param entity Entity to update
     * @throws it._7bits.web.student.dao.DaoGeneralException if operation fails
     */
    @Override
    public void update (final Entity entity)
            throws DaoGeneralException {
        try {
            if (entity != null) {
                Entity toUpdate = (Entity) entityClass
                        .getDeclaredConstructor (entityClass.getSuperclass())
                        .newInstance (entity);
                entityManager.merge (toUpdate);
            }
        } catch (Exception e) {
            throw new DaoGeneralException (getClass(), "Cannot update entity via JPA: ", e);
        }
    }

    /**
     * Remove Entity from the source via JPA
     *
     * @param entity Entity to remove
     * @throws it._7bits.web.student.dao.DaoGeneralException if operation fails
     */
    @Override
    public void remove (final Entity entity)
            throws DaoGeneralException {
        try {
            if (entity != null) {
                Entity toDelete = (Entity) entityClass
                        .getDeclaredConstructor (entityClass.getSuperclass())
                        .newInstance (entity);
                if (entityManager.contains (toDelete)) {
                    entityManager.remove (toDelete);
                } else {
                    entityManager.remove (entityManager.merge (toDelete));
                }
               //entityManager.flush();
            }
        } catch (Exception e) {
            throw new DaoGeneralException (getClass(), "Cannot delete entity via JPA: ", e);
        }
    }

    /**
     * Get Entity name from Dao.
     * Useful to form queries in Service layer
     *
     * @return Entity name
     */
    @Override
    public String getEntityName() {
        return entityClass.getName();
    }
}
